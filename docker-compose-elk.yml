version: '3.8'
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: setup
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - ${ELK_DOMAIN}\n"\
          "    ip:\n"\
          "      - ${ELK_IP_ADDRESS}\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:${ES_PORT} | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:${ES_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Create logstash_writer role";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:${ES_PORT}/_security/role/logstash_writer -d "{\"cluster\":[\"manage_index_templates\",\"manage_ilm\",\"monitor\"],\"indices\":[{\"names\":[\"logs-*\",\".ds.*\",\"syslog-*\",\"unifi-*\",\"filebeat*\"],\"privileges\":[\"write\",\"create\",\"create_index\",\"manage\",\"manage_ilm\"]}]}" | grep -q "^{\"role\":{\"created\":true}}"; do sleep 10; done;
        echo "Create logstash_internal user";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:${ES_PORT}/_security/user/logstash_internal -d "{\"password\":\"${LOGSTASH_INTERNAL_PASSWORD}\",\"roles\":[\"logstash_writer\"]}" | grep -q "^{\"created\":true}"; do sleep 10; done;
        # following request takes a long time to get completed, so curl is called every 10 sec and thus can't be fulfilled. request can be made from fleet dashboard
        # echo "Create Agent Policy";
        # until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" -H "kbn-xsrf: true" https://kibana:${KIBANA_PORT}/api/fleet/agent_policies?sys_monitoring=true -d "{\"name\":\"Agent policy 1\",\"namespace\":\"default\",\"monitoring_enabled\":[\"logs\",\"metrics\"]}" | grep -q "^{\"item\""; do sleep 30; done;
        echo "All done!";
      '

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es01
    depends_on:
      - setup
    ports:
      - "${ES_PORT}:${ES_PORT}"
    env_file:
      - .env
    volumes:
      - "./certs:/usr/share/elasticsearch/config/certs"
      - "./elastic-config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
      - "esdata01:/usr/share/elasticsearch/data"
    mem_limit: "${ES_MEM_LIMIT}"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://${ELK_DOMAIN}:${ES_PORT} | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120    
    
  logstash-agent:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash-agent
    depends_on:
      es01:
        condition: service_healthy
    ports:
      - "${LOGSTASH_BEATS_PORT}:${LOGSTASH_BEATS_PORT}"
      - "${LOGSTASH_SYSLOG_PORT}:${LOGSTASH_SYSLOG_PORT}/tcp"
      - "${LOGSTASH_SYSLOG_PORT}:${LOGSTASH_SYSLOG_PORT}/udp"
      - "${LOGSTASH_SOME_PORT}:${LOGSTASH_SOME_PORT}"
      - "${LOGSTASH_GELF_PORT}:${LOGSTASH_GELF_PORT}/udp"
    environment:
      - LOGSTASH_BEATS_PORT=${LOGSTASH_BEATS_PORT}
      - LOGSTASH_SYSLOG_PORT=${LOGSTASH_SYSLOG_PORT}
      - LOGSTASH_SOME_PORT=${LOGSTASH_SOME_PORT}
      - LOGSTASH_GELF_PORT=${LOGSTASH_GELF_PORT}
      - ES_PORT=${ES_PORT}
    volumes:
      - "./certs:/usr/share/logstash/config/certs"
      - "./logstash-config/agent/logstash.yml:/usr/share/logstash/config/logstash.yml"
      - "./logstash-config/agent/logstash.conf:/etc/logstash/logstash.conf:ro"
    command: logstash -f /etc/logstash/logstash.conf
    mem_limit: "${LS_MEM_LIMIT}"
    restart: unless-stopped

  redis:
    image: redis:6.2
    container_name: redis
    restart: unless-stopped

  logstash-central:
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    container_name: logstash-central
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_USERNAME=${LOGSTASH_INTERNAL_USERNAME}
      - ELASTICSEARCH_PASSWORD=${LOGSTASH_INTERNAL_PASSWORD}
      - ES_PORT=${ES_PORT}
    volumes:
      - "./certs:/usr/share/logstash/config/certs"
      - "./logstash-config/central/logstash.yml:/usr/share/logstash/config/logstash.yml"      
      - "./logstash-config/central/logstash.conf:/etc/logstash/logstash.conf:ro"
    command: logstash -f /etc/logstash/logstash.conf
    mem_limit: "${LS_MEM_LIMIT}"
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    env_file:
      - .env
    volumes:
      - "./certs:/usr/share/kibana/config/certs"
      - "./kibana-config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
      - "kibanadata01:/usr/share/kibana/data"
    mem_limit: "${KI_MEM_LIMIT}"
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I https://${ELK_DOMAIN}:${KIBANA_PORT} | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120    

volumes:
  esdata01:
  kibanadata01:
