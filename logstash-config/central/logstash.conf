input {
  redis {
    host => "redis"
    type => "redis-input"
    data_type => "list"
    key => "logstash"
  }
}

filter {
  if [type] == "syslog" {
    # Syslog
    if [message] =~ "sequenceId" {
      # Synology
      grok {
        match => { "message" => '<%{POSINT:syslog_pri}>%{INT:version} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:hostname} %{DATA:syslog_program} - - (?:\[.+sequenceId="%{POSINT:message_id}"])? %{GREEDYDATA:log_message}' }
        add_field => [ "source", "%{hostname}" ]
      }
      syslog_pri { }
    } else {
      # All other syslogs
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:hostname} %{DATA:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:log_message}" }
        add_field => [ "source", "%{hostname}" ]
      }
      date {
        match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        target => "timestamp"
      }
    }
  } else if [container_name] {
    # Docker
    # Move GELF 'host' to ECS 'host.hostname'
    mutate {
      rename => { "[host]" => "[host][hostname]" }
    }

    if [container_name] == "home-assistant" {
      # Home Assistant
      grok {
        match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:log_level} \(%{WORD:thread}\) \[%{NOTSPACE:namespace}\] %{GREEDYDATA:log_message}" }
        add_field => [ "[host][name]", "%{container_name}" ]
      }
    } else if [container_name] == "photoprism" {
      # PhotoPrism
      grok {
        match => { "message" => "time=\"%{TIMESTAMP_ISO8601:timestamp}\" level\=%{WORD:log_level} msg\=\"%{GREEDYDATA:log_message}\"" }
        add_field => [ "[host][name]", "%{container_name}" ]
      }
    } else {
      # All other containers
      grok {
        match => { "message" => "%{IP:client_ip} \- %{USERNAME:username} \[%{HTTPDATE:timestamp}\] \"%{WORD:http_method} %{NOTSPACE:path} HTTP/%{NUMBER:http_version}\" %{NUMBER:http_status} %{NUMBER:bytes} \"%{NOTSPACE:referrer}\" \"%{GREEDYDATA:user_agent}\"(?: \"%{IP:forwarded_for}\")?" }
        add_field => [ "[host][name]", "%{container_name}" ]
        add_field => [ "log_message", "%{message}" ]
      }
    }
  }

  if [hostname] and ![host][hostname] {
    mutate {
      copy => { "[hostname]" => "[host][hostname]" }
    }
  }

  if [hostname] and ![host][name] {
    mutate {
      copy => { "[hostname]" => "[host][name]" }
    }
  }

  # Use "source_host" as "host.ip"
  if [source_host] and ![host][ip] {
    mutate {
      copy => { "source_host" => "[host][ip]" }
    }
  }

  # Remove "message" if correctly parsed
  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => ["message"]
    }
  }
}

output {
    #uncomment following line to enable debug output
    # stdout { codec => rubydebug }

    elasticsearch {
      hosts => ["https://es01:${ES_PORT}"]
      ssl_enabled => true
      ssl_verification_mode => full
      ssl_certificate_authorities => 'config/certs/ca/ca.crt'
      user => "${ELASTICSEARCH_USERNAME}"
      password => "${ELASTICSEARCH_PASSWORD}"
      manage_template => false
      index => "%{[agent][type]}-%{[agent][version]}-%{+YYYY.MM.dd}"
    }
}